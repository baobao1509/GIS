// C·∫•u h√¨nh b·∫£n ƒë·ªì
let config = {
  minZoom: 7,
  maxZoom: 18,
  fullscreenControl: true,
        fullscreenControlOptions: {
            position: 'topleft'
        }
};

// ƒê·ªô ph√≥ng ƒë·∫°i khi b·∫£n ƒë·ªì ƒë∆∞·ª£c m·ªü
const zoom = 18;

// T·ªça ƒë·ªô Tr∆∞·ªùng
const lat = 10.796501883372228;
const lng = 106.66680416611385;

// Kh·ªüi t·∫°o b·∫£n ƒë·ªì
const map = L.map("map", config).setView([lat, lng], zoom);
map.attributionControl.setPrefix(false);

// ƒê∆∞·ª£c d√πng ƒë·ªÉ t·∫£i v√† tr√¨nh c√°c layer tr√™n b·∫£n ƒë·ªì
L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
  attribution: '&copy; <a href="#">LT GIS </a> c∆° b·∫£n',
}).addTo(map);

const query = `
[out:json];
area[name="Th√†nh ph·ªë H·ªì Ch√≠ Minh"]->.searchArea;
(
  node["shop"="supermarket"](area.searchArea);  // Si√™u th·ªã trong khu v·ª±c TP.HCM
  node["amenity"="market"](area.searchArea);    // Ch·ª£ trong khu v·ª±c TP.HCM
);
out body;
`;
const overpassUrl = "http://overpass-api.de/api/interpreter";
const overpassQuery = query;














// üè™ T·∫°o icon cho si√™u th·ªã v√† ch·ª£
const supermarketIcon = L.icon({
  iconUrl: "/static/leaflet/images/supermarket.png", // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n ·∫£nh icon
  iconSize: [32, 32],
  iconAnchor: [16, 32],
  popupAnchor: [0, -32]
});

const marketIcon = L.icon({
  iconUrl: "/static/leaflet/imgage/market.png", // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n ·∫£nh icon
  iconSize: [32, 32],
  iconAnchor: [16, 32],
  popupAnchor: [0, -32]
});
























const shopMarkers = []; // l∆∞u c√°c marker ch·ª£/si√™u th·ªã
let shopsVisible = false;
  
function escapeString(str) {
  return String(str)
    .replace(/\\/g, '\\\\')           // Escape backslash
    .replace(/'/g, "\\'")             // Escape d·∫•u nh√°y ƒë∆°n
    .replace(/"/g, '')             // Escape d·∫•u nh√°y k√©p
    .replace(/\n/g, ' ')              // Thay th·∫ø xu·ªëng d√≤ng
    .replace(/\r/g, ' ')              // Thay th·∫ø carriage return
    .replace(/\u2028/g, '\\u2028')    // Escape line separator
    .replace(/\u2029/g, '\\u2029')    // Escape paragraph separator
    .replace(/</g, '&lt;')            // Ch·ªëng XSS
    .replace(/>/g, '&gt;');           // Ch·ªëng XSS
}
window.addEventListener('DOMContentLoaded', () => {
  fetch(`/static/chuyen_doi_quan_cafe.csv?t=${Date.now()}`)
    .then((response) => response.text())
    .then((csvText) => {
      let rows = csvText.split("\n").slice(1);
      rows.forEach((row) => {
        let cols = row.split(",", 8); // ƒê·∫£m b·∫£o ƒë·ªß 8 c·ªôt
        if (cols.length >= 8) {
          let lat = parseFloat(cols[1]);
          let lon = parseFloat(cols[2]);
          let name = cols[3] || "Kh√¥ng r√µ";
          let shopType = cols[4] || "Kh√¥ng x√°c ƒë·ªãnh";
          let openingHours = cols[5] || "Kh√¥ng c√≥ th√¥ng tin";
          let address = cols[6] || "Ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t";
          let image = cols[7] || "Ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t";
          image = image.replace(/\\/g, "/");
          if (!isNaN(lat) && !isNaN(lon)) {
            let icon = shopType.toLowerCase().includes("supermarket") ? supermarketIcon : marketIcon;
            let popupContent = `
            <div style="font-family: Arial, sans-serif; max-width: 250px;">
              <h3 style="margin: 0 0 8px 0; font-size: 16px; color: #333;">${name}</h3>
              
              <p style="margin: 4px 0;"><strong>Lo·∫°i:</strong> ${shopType}</p>
              <p style="margin: 4px 0;"><strong>Gi·ªù m·ªü c·ª≠a:</strong> ${openingHours}</p>
              <p style="margin: 4px 0;"><strong>ƒê·ªãa ch·ªâ:</strong> ${address}</p>
          
              <img src="/${image}" alt="H√¨nh ·∫£nh" style="width: 100%; height: auto; border-radius: 6px; margin: 10px 0;">
          
              <div style="display: flex; flex-direction: column; gap: 6px;">
                <button 
                  onclick="toggleRoute(this, ${lat}, ${lon})" 
                  id="btn_duong_di"
                  style="
                    background-color: #007bff;
                    color: white;
                    border: none;
                    padding: 8px 12px;
                    border-radius: 4px;
                    cursor: pointer;
                  "
                >
                  Xem ƒë∆∞·ªùng ƒëi
                </button>
          
                <button 
                  onclick="goToContribution(${lat}, ${lon}, '${escapeString(name)}', '${escapeString(openingHours)}', '${escapeString(address)}', '${escapeString(shopType)}', '${escapeString(image)}')"
                  style="
                    background-color: #28a745;
                    color: white;
                    border: none;
                    padding: 8px 12px;
                    border-radius: 4px;
                    cursor: pointer;
                  "
                >
                  ƒê√≥ng g√≥p
                </button>
              </div>
            </div>
          `;          
            let marker = L.marker([lat, lon], { icon: icon }).bindPopup(popupContent);
            shopMarkers.push(marker);
          }
        }
      });
    })
    .catch((error) => console.error("L·ªói khi t·∫£i CSV:", error));
});


const routeBtn = document.getElementById("btn_duong_di");

// H√†m hi·ªÉn th·ªã/·∫©n ch·ª£ v√† si√™u th·ªã
  function toggleShopsAndMarkets() {
    const button = document.getElementById("toggleMarkersBtn");
  
    if (shopsVisible) {
      // ·∫®n marker
      shopMarkers.forEach(marker => map.removeLayer(marker));
      // X√≥a ƒë∆∞·ªùng ƒëi n·∫øu ƒëang c√≥
    if (routeControl) {
      map.removeControl(routeControl);
      routeControl = null;
    }
      button.textContent = "Hi·ªÉn th·ªã ch·ª£ v√† si√™u th·ªã";
    } else {
      // Hi·ªán marker
      shopMarkers.forEach(marker => marker.addTo(map));
      button.textContent = "·∫®n ch·ª£ v√† si√™u th·ªã";
    }
  
    shopsVisible = !shopsVisible;
  }
  

  







  // Hi·ªÉn th·ªã v·ªã tr√≠ c·ªßa ng∆∞·ªùi d√πng tr√™n b·∫£n ƒë·ªì
  // T·∫°o icon cho v·ªã tr√≠ ng∆∞·ªùi d√πng
  const userIcon = L.icon({
    iconUrl: "/static/leaflet/images/user-location.png", // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n n·∫øu c√≥ icon
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32]
  });


  let userLocation = null;
  let routeControl = null;
  map.locate({
    setView: true,              // T·ª± ƒë·ªông ƒë∆∞a b·∫£n ƒë·ªì v·ªÅ v·ªã tr√≠ ng∆∞·ªùi d√πng
    enableHighAccuracy: true   // C·ªë g·∫Øng l·∫•y v·ªã tr√≠ ch√≠nh x√°c nh·∫•t
  })
  // N·∫øu t√¨m ƒë∆∞·ª£c v·ªã tr√≠ ‚Üí hi·ªÉn th·ªã marker
  .on("locationfound", (e) => {
    userLocation = [e.latitude, e.longitude]; // L∆∞u l·∫°i v·ªã tr√≠ ng∆∞·ªùi d√πng
    // T·∫°o marker t·∫°i v·ªã tr√≠ ng∆∞·ªùi d√πng
    const marker = L.marker([e.latitude, e.longitude],{icon:userIcon}).addTo(map)
      .bindPopup("V·ªã tr√≠ hi·ªán t·∫°i c·ªßa b·∫°n");
    // Th√™m marker v√† circle v√†o b·∫£n ƒë·ªì
    map.addLayer(marker);
  })
  
  // N·∫øu c√≥ l·ªói (v√≠ d·ª• ng∆∞·ªùi d√πng t·ª´ ch·ªëi chia s·∫ª v·ªã tr√≠)
  .on("locationerror", (e) => {
    alert("Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ c·ªßa b·∫°n: " );
  });
  




  



//H√†m x√≥a ƒë∆∞·ªùng ƒëi
  function toggleRoute(button, destLat, destLng) {
    if (button.textContent === "Xem ƒë∆∞·ªùng ƒëi") {
      if (!userLocation) {
        alert("Ch∆∞a x√°c ƒë·ªãnh ƒë∆∞·ª£c v·ªã tr√≠ c·ªßa b·∫°n.");
        return;
      }
  
      // X√≥a tuy·∫øn c≈© n·∫øu c√≥
      if (routeControl) {
        map.removeControl(routeControl);
      }
  
      // T·∫°o tuy·∫øn ƒë∆∞·ªùng m·ªõi
      routeControl = L.Routing.control({
        waypoints: [
          L.latLng(userLocation[0], userLocation[1]),
          L.latLng(destLat, destLng)
        ],
        routeWhileDragging: false,
        show: true,
        addWaypoints: false,
        lineOptions: {
          styles: [{ color: 'blue', weight: 4, opacity: 0.7 }]
      },
        createMarker: () => null // Kh√¥ng t·∫°o th√™m marker m·∫∑c ƒë·ªãnh
      }).addTo(map);
  
      // ƒê·ªïi t√™n n√∫t
      button.textContent = "X√≥a ƒë∆∞·ªùng ƒëi";
    } else {
      // X√≥a ƒë∆∞·ªùng ƒëi
      if (routeControl) {
        map.removeControl(routeControl);
        routeControl = null;
      }
      // ƒê·ªïi t√™n n√∫t l·∫°i
      button.textContent = "Xem ƒë∆∞·ªùng ƒëi";
    }
  }
  



//H√†m t√¨m ƒë·∫øn ch·ª£ ho·∫∑c si√™u th·ªã g·∫ßn nh·∫•t
  function routeToNearestShop() {
    if (!userLocation) {
      alert("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa b·∫°n.");
      return;
    }
  
    if (shopMarkers.length === 0) {
      alert("Ch∆∞a c√≥ d·ªØ li·ªáu ch·ª£ ho·∫∑c si√™u th·ªã.");
      return;
    }
  
    // T√¨m marker g·∫ßn nh·∫•t
    let nearestMarker = null;
    let minDistance = Infinity;
  
    shopMarkers.forEach(marker => {
      const latlng = marker.getLatLng();
      const distance = map.distance(userLocation, latlng);
      if (distance < minDistance) {
        minDistance = distance;
        nearestMarker = marker;
      }
    });
  
    if (!nearestMarker) {
      alert("Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë·ªãa ƒëi·ªÉm g·∫ßn nh·∫•t.");
      return;
    }
  
    // X√≥a tuy·∫øn c≈© n·∫øu c√≥
    if (routeControl) {
      map.removeControl(routeControl);
    }
  
    // T·∫°o tuy·∫øn ƒë∆∞·ªùng t·ªõi ƒë·ªãa ƒëi·ªÉm g·∫ßn nh·∫•t
    // T·∫°o tuy·∫øn ƒë∆∞·ªùng t·ªõi ƒë·ªãa ƒëi·ªÉm g·∫ßn nh·∫•t
    routeControl = L.Routing.control({
      waypoints: [
        L.latLng(userLocation[0], userLocation[1]),
        nearestMarker.getLatLng()
      ],
      routeWhileDragging: false,
      addWaypoints: false,
      lineOptions: {
        styles: [{ color: 'blue', weight: 4, opacity: 0.7 }]
    },
      createMarker: () => null
    }).addTo(map);

    // LU√îN th√™m marker v√†o b·∫£n ƒë·ªì
    nearestMarker.addTo(map);
    
    //ƒê·ªïi button th√†nh x√≥a ƒë∆∞·ªùng ƒëi
    nearestMarker.openPopup();
    setTimeout(() => {
      const popup = document.querySelector(".leaflet-popup-content");
      const btn = popup?.querySelector("#btn_duong_di");
      if (btn) {
        // B·∫°n c√≥ th·ªÉ thao t√°c n√∫t n√†y
        btn.textContent = "X√≥a ƒë∆∞·ªùng ƒëi";
        const nearestLatLng = nearestMarker.getLatLng();
        btn.onclick = function () {
          toggleRoute(this, nearestLatLng.lat, nearestLatLng.lng);
        };
      }
    }, 100);
    


    // Hi·ªÉn th·ªã popup
    nearestMarker.openPopup();
  }

  
  function goToContribution(lat, lng, name, openingHours, address,shopType,image) {
    const url = `/map/dong-gop?lat=${lat}&lng=${lng}&name=${encodeURIComponent(name)}&openingHours=${encodeURIComponent(openingHours)}&address=${encodeURIComponent(address)}&shopType=${encodeURIComponent(shopType)}&image=${encodeURIComponent(image)}`;
    window.location.href = url;
  }
  
  
  

  // B·∫Øt s·ª± ki·ªán click tr√™n b·∫£n ƒë·ªì ƒë·ªÉ l·∫•y t·ªça ƒë·ªô
map.on('click', function(e) {
  const clickedLat = e.latlng.lat;
  const clickedLng = e.latlng.lng;
 // N·ªôi dung popup g·ªìm t·ªça ƒë·ªô v√† n√∫t d·∫´n ƒë·∫øn trang ƒë√≥ng g√≥p
 const popupContent = `
 üìç T·ªça ƒë·ªô:<br>
 Lat: ${clickedLat.toFixed(6)}<br>
 Lng: ${clickedLng.toFixed(6)}<br><br>
   <button  onclick="goToContribution(${clickedLat}, ${clickedLng}, '', '', '', '')" style="padding:5px 10px; background-color:#28a745; color:white; border:none; border-radius:4px; cursor:pointer;">
     ƒê√≥ng g√≥p th√¥ng tin
   </button>
`;
  // Hi·ªÉn th·ªã popup t·∫°i v·ªã tr√≠ ƒë∆∞·ª£c nh·∫•p
  L.popup()
    .setLatLng(e.latlng)
    .setContent(popupContent)
    .openOn(map);
});
